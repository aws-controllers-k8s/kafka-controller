// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package serverless_cluster

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customPreCompare(delta, a, b)

	if !reflect.DeepEqual(a.ko.Spec.AssociatedSCRAMSecretRefs, b.ko.Spec.AssociatedSCRAMSecretRefs) {
		delta.Add("Spec.AssociatedSCRAMSecretRefs", a.ko.Spec.AssociatedSCRAMSecretRefs, b.ko.Spec.AssociatedSCRAMSecretRefs)
	}
	if len(a.ko.Spec.AssociatedSCRAMSecrets) != len(b.ko.Spec.AssociatedSCRAMSecrets) {
		delta.Add("Spec.AssociatedSCRAMSecrets", a.ko.Spec.AssociatedSCRAMSecrets, b.ko.Spec.AssociatedSCRAMSecrets)
	} else if len(a.ko.Spec.AssociatedSCRAMSecrets) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AssociatedSCRAMSecrets, b.ko.Spec.AssociatedSCRAMSecrets) {
			delta.Add("Spec.AssociatedSCRAMSecrets", a.ko.Spec.AssociatedSCRAMSecrets, b.ko.Spec.AssociatedSCRAMSecrets)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Provisioned, b.ko.Spec.Provisioned) {
		delta.Add("Spec.Provisioned", a.ko.Spec.Provisioned, b.ko.Spec.Provisioned)
	} else if a.ko.Spec.Provisioned != nil && b.ko.Spec.Provisioned != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo) {
			delta.Add("Spec.Provisioned.BrokerNodeGroupInfo", a.ko.Spec.Provisioned.BrokerNodeGroupInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo)
		} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution) {
				delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution)
			} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution != nil {
				if *a.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution != *b.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution {
					delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.BrokerAZDistribution)
				}
			}
			if len(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets) != len(b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets) {
				delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets)
			} else if len(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets) {
					delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ClientSubnets)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo) {
				delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo)
			} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess) {
					delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess)
				} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type) {
						delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type)
					} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type != nil {
						if *a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type != *b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type {
							delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type)
						}
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType) {
				delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.InstanceType", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType)
			} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType != nil {
				if *a.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType != *b.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType {
					delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.InstanceType", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.InstanceType)
				}
			}
			if len(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups) != len(b.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups) {
				delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups)
			} else if len(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups) {
					delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.SecurityGroups)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo) {
				delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo)
			} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo) {
					delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo)
				} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput) {
						delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput)
					} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput != nil {
						if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled) {
							delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled)
						} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled != nil {
							if *a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled != *b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled {
								delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.Enabled)
							}
						}
						if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput) {
							delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput)
						} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput != nil {
							if *a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput != *b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput {
								delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.ProvisionedThroughput.VolumeThroughput)
							}
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize) {
						delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize)
					} else if a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize != nil && b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize != nil {
						if *a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize != *b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize {
							delta.Add("Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize", a.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize, b.ko.Spec.Provisioned.BrokerNodeGroupInfo.StorageInfo.EBSStorageInfo.VolumeSize)
						}
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication, b.ko.Spec.Provisioned.ClientAuthentication) {
			delta.Add("Spec.Provisioned.ClientAuthentication", a.ko.Spec.Provisioned.ClientAuthentication, b.ko.Spec.Provisioned.ClientAuthentication)
		} else if a.ko.Spec.Provisioned.ClientAuthentication != nil && b.ko.Spec.Provisioned.ClientAuthentication != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.SASL, b.ko.Spec.Provisioned.ClientAuthentication.SASL) {
				delta.Add("Spec.Provisioned.ClientAuthentication.SASL", a.ko.Spec.Provisioned.ClientAuthentication.SASL, b.ko.Spec.Provisioned.ClientAuthentication.SASL)
			} else if a.ko.Spec.Provisioned.ClientAuthentication.SASL != nil && b.ko.Spec.Provisioned.ClientAuthentication.SASL != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM, b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM) {
					delta.Add("Spec.Provisioned.ClientAuthentication.SASL.IAM", a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM, b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM)
				} else if a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM != nil && b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled) {
						delta.Add("Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled)
					} else if a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled != nil && b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled != nil {
						if *a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled != *b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled {
							delta.Add("Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.SASL.IAM.Enabled)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM, b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM) {
					delta.Add("Spec.Provisioned.ClientAuthentication.SASL.SCRAM", a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM, b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM)
				} else if a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM != nil && b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled) {
						delta.Add("Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled)
					} else if a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled != nil && b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled != nil {
						if *a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled != *b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled {
							delta.Add("Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.SASL.SCRAM.Enabled)
						}
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.TLS, b.ko.Spec.Provisioned.ClientAuthentication.TLS) {
				delta.Add("Spec.Provisioned.ClientAuthentication.TLS", a.ko.Spec.Provisioned.ClientAuthentication.TLS, b.ko.Spec.Provisioned.ClientAuthentication.TLS)
			} else if a.ko.Spec.Provisioned.ClientAuthentication.TLS != nil && b.ko.Spec.Provisioned.ClientAuthentication.TLS != nil {
				if len(a.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList) != len(b.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList) {
					delta.Add("Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList", a.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList, b.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList)
				} else if len(a.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList) > 0 {
					if !ackcompare.SliceStringPEqual(a.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList, b.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList) {
						delta.Add("Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList", a.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList, b.ko.Spec.Provisioned.ClientAuthentication.TLS.CertificateAuthorityARNList)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled) {
					delta.Add("Spec.Provisioned.ClientAuthentication.TLS.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled)
				} else if a.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled != nil && b.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled != nil {
					if *a.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled != *b.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled {
						delta.Add("Spec.Provisioned.ClientAuthentication.TLS.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.TLS.Enabled)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated, b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated) {
				delta.Add("Spec.Provisioned.ClientAuthentication.Unauthenticated", a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated, b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated)
			} else if a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated != nil && b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled) {
					delta.Add("Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled)
				} else if a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled != nil && b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled != nil {
					if *a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled != *b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled {
						delta.Add("Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled", a.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled, b.ko.Spec.Provisioned.ClientAuthentication.Unauthenticated.Enabled)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ConfigurationInfo, b.ko.Spec.Provisioned.ConfigurationInfo) {
			delta.Add("Spec.Provisioned.ConfigurationInfo", a.ko.Spec.Provisioned.ConfigurationInfo, b.ko.Spec.Provisioned.ConfigurationInfo)
		} else if a.ko.Spec.Provisioned.ConfigurationInfo != nil && b.ko.Spec.Provisioned.ConfigurationInfo != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ConfigurationInfo.ARN, b.ko.Spec.Provisioned.ConfigurationInfo.ARN) {
				delta.Add("Spec.Provisioned.ConfigurationInfo.ARN", a.ko.Spec.Provisioned.ConfigurationInfo.ARN, b.ko.Spec.Provisioned.ConfigurationInfo.ARN)
			} else if a.ko.Spec.Provisioned.ConfigurationInfo.ARN != nil && b.ko.Spec.Provisioned.ConfigurationInfo.ARN != nil {
				if *a.ko.Spec.Provisioned.ConfigurationInfo.ARN != *b.ko.Spec.Provisioned.ConfigurationInfo.ARN {
					delta.Add("Spec.Provisioned.ConfigurationInfo.ARN", a.ko.Spec.Provisioned.ConfigurationInfo.ARN, b.ko.Spec.Provisioned.ConfigurationInfo.ARN)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.ConfigurationInfo.Revision, b.ko.Spec.Provisioned.ConfigurationInfo.Revision) {
				delta.Add("Spec.Provisioned.ConfigurationInfo.Revision", a.ko.Spec.Provisioned.ConfigurationInfo.Revision, b.ko.Spec.Provisioned.ConfigurationInfo.Revision)
			} else if a.ko.Spec.Provisioned.ConfigurationInfo.Revision != nil && b.ko.Spec.Provisioned.ConfigurationInfo.Revision != nil {
				if *a.ko.Spec.Provisioned.ConfigurationInfo.Revision != *b.ko.Spec.Provisioned.ConfigurationInfo.Revision {
					delta.Add("Spec.Provisioned.ConfigurationInfo.Revision", a.ko.Spec.Provisioned.ConfigurationInfo.Revision, b.ko.Spec.Provisioned.ConfigurationInfo.Revision)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EncryptionInfo, b.ko.Spec.Provisioned.EncryptionInfo) {
			delta.Add("Spec.Provisioned.EncryptionInfo", a.ko.Spec.Provisioned.EncryptionInfo, b.ko.Spec.Provisioned.EncryptionInfo)
		} else if a.ko.Spec.Provisioned.EncryptionInfo != nil && b.ko.Spec.Provisioned.EncryptionInfo != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest) {
				delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionAtRest", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest)
			} else if a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest != nil && b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID) {
					delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID)
				} else if a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID != nil && b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID != nil {
					if *a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID != *b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID {
						delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID)
					}
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit) {
				delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionInTransit", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit)
			} else if a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit != nil && b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker) {
					delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker)
				} else if a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker != nil && b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker != nil {
					if *a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker != *b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker {
						delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.ClientBroker)
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster) {
					delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster)
				} else if a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster != nil && b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster != nil {
					if *a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster != *b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster {
						delta.Add("Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster", a.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster, b.ko.Spec.Provisioned.EncryptionInfo.EncryptionInTransit.InCluster)
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.EnhancedMonitoring, b.ko.Spec.Provisioned.EnhancedMonitoring) {
			delta.Add("Spec.Provisioned.EnhancedMonitoring", a.ko.Spec.Provisioned.EnhancedMonitoring, b.ko.Spec.Provisioned.EnhancedMonitoring)
		} else if a.ko.Spec.Provisioned.EnhancedMonitoring != nil && b.ko.Spec.Provisioned.EnhancedMonitoring != nil {
			if *a.ko.Spec.Provisioned.EnhancedMonitoring != *b.ko.Spec.Provisioned.EnhancedMonitoring {
				delta.Add("Spec.Provisioned.EnhancedMonitoring", a.ko.Spec.Provisioned.EnhancedMonitoring, b.ko.Spec.Provisioned.EnhancedMonitoring)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.KafkaVersion, b.ko.Spec.Provisioned.KafkaVersion) {
			delta.Add("Spec.Provisioned.KafkaVersion", a.ko.Spec.Provisioned.KafkaVersion, b.ko.Spec.Provisioned.KafkaVersion)
		} else if a.ko.Spec.Provisioned.KafkaVersion != nil && b.ko.Spec.Provisioned.KafkaVersion != nil {
			if *a.ko.Spec.Provisioned.KafkaVersion != *b.ko.Spec.Provisioned.KafkaVersion {
				delta.Add("Spec.Provisioned.KafkaVersion", a.ko.Spec.Provisioned.KafkaVersion, b.ko.Spec.Provisioned.KafkaVersion)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo, b.ko.Spec.Provisioned.LoggingInfo) {
			delta.Add("Spec.Provisioned.LoggingInfo", a.ko.Spec.Provisioned.LoggingInfo, b.ko.Spec.Provisioned.LoggingInfo)
		} else if a.ko.Spec.Provisioned.LoggingInfo != nil && b.ko.Spec.Provisioned.LoggingInfo != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs) {
				delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs)
			} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs) {
					delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs)
				} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled)
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose) {
					delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose)
				} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.DeliveryStream)
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.Firehose.Enabled)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3) {
					delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3)
				} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3 != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3 != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Bucket)
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Enabled)
						}
					}
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix) {
						delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix)
					} else if a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix != nil && b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix != nil {
						if *a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix != *b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix {
							delta.Add("Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix", a.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix, b.ko.Spec.Provisioned.LoggingInfo.BrokerLogs.S3.Prefix)
						}
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.NumberOfBrokerNodes, b.ko.Spec.Provisioned.NumberOfBrokerNodes) {
			delta.Add("Spec.Provisioned.NumberOfBrokerNodes", a.ko.Spec.Provisioned.NumberOfBrokerNodes, b.ko.Spec.Provisioned.NumberOfBrokerNodes)
		} else if a.ko.Spec.Provisioned.NumberOfBrokerNodes != nil && b.ko.Spec.Provisioned.NumberOfBrokerNodes != nil {
			if *a.ko.Spec.Provisioned.NumberOfBrokerNodes != *b.ko.Spec.Provisioned.NumberOfBrokerNodes {
				delta.Add("Spec.Provisioned.NumberOfBrokerNodes", a.ko.Spec.Provisioned.NumberOfBrokerNodes, b.ko.Spec.Provisioned.NumberOfBrokerNodes)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.OpenMonitoring, b.ko.Spec.Provisioned.OpenMonitoring) {
			delta.Add("Spec.Provisioned.OpenMonitoring", a.ko.Spec.Provisioned.OpenMonitoring, b.ko.Spec.Provisioned.OpenMonitoring)
		} else if a.ko.Spec.Provisioned.OpenMonitoring != nil && b.ko.Spec.Provisioned.OpenMonitoring != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.OpenMonitoring.Prometheus, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus) {
				delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus)
			} else if a.ko.Spec.Provisioned.OpenMonitoring.Prometheus != nil && b.ko.Spec.Provisioned.OpenMonitoring.Prometheus != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter) {
					delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter)
				} else if a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter != nil && b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker) {
						delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker)
					} else if a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker != nil && b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker != nil {
						if *a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker != *b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker {
							delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker)
						}
					}
				}
				if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter) {
					delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter)
				} else if a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter != nil && b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker) {
						delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker)
					} else if a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker != nil && b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker != nil {
						if *a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker != *b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker {
							delta.Add("Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker", a.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker, b.ko.Spec.Provisioned.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker)
						}
					}
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Provisioned.StorageMode, b.ko.Spec.Provisioned.StorageMode) {
			delta.Add("Spec.Provisioned.StorageMode", a.ko.Spec.Provisioned.StorageMode, b.ko.Spec.Provisioned.StorageMode)
		} else if a.ko.Spec.Provisioned.StorageMode != nil && b.ko.Spec.Provisioned.StorageMode != nil {
			if *a.ko.Spec.Provisioned.StorageMode != *b.ko.Spec.Provisioned.StorageMode {
				delta.Add("Spec.Provisioned.StorageMode", a.ko.Spec.Provisioned.StorageMode, b.ko.Spec.Provisioned.StorageMode)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Serverless, b.ko.Spec.Serverless) {
		delta.Add("Spec.Serverless", a.ko.Spec.Serverless, b.ko.Spec.Serverless)
	} else if a.ko.Spec.Serverless != nil && b.ko.Spec.Serverless != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Serverless.ClientAuthentication, b.ko.Spec.Serverless.ClientAuthentication) {
			delta.Add("Spec.Serverless.ClientAuthentication", a.ko.Spec.Serverless.ClientAuthentication, b.ko.Spec.Serverless.ClientAuthentication)
		} else if a.ko.Spec.Serverless.ClientAuthentication != nil && b.ko.Spec.Serverless.ClientAuthentication != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.Serverless.ClientAuthentication.SASL, b.ko.Spec.Serverless.ClientAuthentication.SASL) {
				delta.Add("Spec.Serverless.ClientAuthentication.SASL", a.ko.Spec.Serverless.ClientAuthentication.SASL, b.ko.Spec.Serverless.ClientAuthentication.SASL)
			} else if a.ko.Spec.Serverless.ClientAuthentication.SASL != nil && b.ko.Spec.Serverless.ClientAuthentication.SASL != nil {
				if ackcompare.HasNilDifference(a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM, b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM) {
					delta.Add("Spec.Serverless.ClientAuthentication.SASL.IAM", a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM, b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM)
				} else if a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM != nil && b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM != nil {
					if ackcompare.HasNilDifference(a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled, b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled) {
						delta.Add("Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled", a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled, b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled)
					} else if a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled != nil && b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled != nil {
						if *a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled != *b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled {
							delta.Add("Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled", a.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled, b.ko.Spec.Serverless.ClientAuthentication.SASL.IAM.Enabled)
						}
					}
				}
			}
		}
		if len(a.ko.Spec.Serverless.VPCConfigs) != len(b.ko.Spec.Serverless.VPCConfigs) {
			delta.Add("Spec.Serverless.VPCConfigs", a.ko.Spec.Serverless.VPCConfigs, b.ko.Spec.Serverless.VPCConfigs)
		} else if len(a.ko.Spec.Serverless.VPCConfigs) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.Serverless.VPCConfigs, b.ko.Spec.Serverless.VPCConfigs) {
				delta.Add("Spec.Serverless.VPCConfigs", a.ko.Spec.Serverless.VPCConfigs, b.ko.Spec.Serverless.VPCConfigs)
			}
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
