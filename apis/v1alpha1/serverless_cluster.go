// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ServerlessClusterSpec defines the desired state of ServerlessCluster.
type ServerlessClusterSpec struct {
	AssociatedSCRAMSecretRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"associatedSCRAMSecretRefs,omitempty"`
	AssociatedSCRAMSecrets    []*string                                  `json:"associatedSCRAMSecrets,omitempty"`
	// The name of the cluster.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// Information about the provisioned cluster.
	Provisioned *ProvisionedRequest `json:"provisioned,omitempty"`
	// Information about the serverless cluster.
	Serverless *ServerlessRequest `json:"serverless,omitempty"`
	// A map of tags that you want the cluster to have.
	Tags map[string]*string `json:"tags,omitempty"`
}

// ServerlessClusterStatus defines the observed state of ServerlessCluster
type ServerlessClusterStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The current version of the MSK cluster.
	// +kubebuilder:validation:Optional
	CurrentVersion *string `json:"currentVersion,omitempty"`
	// The state of the cluster. The possible states are ACTIVE, CREATING, DELETING,
	// FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty"`
	// The type of the cluster. The possible states are PROVISIONED or SERVERLESS.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty"`
}

// ServerlessCluster is the Schema for the ServerlessClusters API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type ServerlessCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerlessClusterSpec   `json:"spec,omitempty"`
	Status            ServerlessClusterStatus `json:"status,omitempty"`
}

// ServerlessClusterList contains a list of ServerlessCluster
// +kubebuilder:object:root=true
type ServerlessClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerlessCluster `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ServerlessCluster{}, &ServerlessClusterList{})
}
