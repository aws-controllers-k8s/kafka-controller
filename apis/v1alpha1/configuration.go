// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ConfigurationSpec defines the desired state of Configuration.
//
// Represents an MSK Configuration.
type ConfigurationSpec struct {

	// The description of the configuration.

	Description *string `json:"description,omitempty"`
	// The versions of Apache Kafka with which you can use this MSK configuration.

	KafkaVersions []*string `json:"kafkaVersions,omitempty"`
	// The name of the configuration.

	// +kubebuilder:validation:Required

	Name *string `json:"name"`
	// Contents of the server.properties file. When using the API, you must ensure
	// that the contents of the file are base64 encoded. When using the AWS Management
	// Console, the SDK, or the AWS CLI, the contents of server.properties can be
	// in plaintext.

	// +kubebuilder:validation:Required

	ServerProperties []byte `json:"serverProperties"`
}

// ConfigurationStatus defines the observed state of Configuration
type ConfigurationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The time when the configuration was created.
	// +kubebuilder:validation:Optional
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Latest revision of the configuration.
	// +kubebuilder:validation:Optional
	LatestRevision *ConfigurationRevision `json:"latestRevision,omitempty"`
	// The state of the configuration. The possible states are ACTIVE, DELETING,
	// and DELETE_FAILED.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty"`
}

// Configuration is the Schema for the Configurations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Configuration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationSpec   `json:"spec,omitempty"`
	Status            ConfigurationStatus `json:"status,omitempty"`
}

// ConfigurationList contains a list of Configuration
// +kubebuilder:object:root=true
type ConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Configuration `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Configuration{}, &ConfigurationList{})
}
